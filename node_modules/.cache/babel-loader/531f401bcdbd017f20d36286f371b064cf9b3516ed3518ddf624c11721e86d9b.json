{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check for existing session on app load\nconst savedUser=localStorage.getItem('user');if(savedUser){setUser(JSON.parse(savedUser));}setLoading(false);},[]);const login=async(email,password)=>{setLoading(true);try{// Use production API if available, otherwise fallback to mock\nconst API_URL=process.env.REACT_APP_API_URL||'http://localhost:3001/api';if(API_URL&&API_URL!=='http://localhost:3001/api'){// Production API call\nconst response=await fetch(\"\".concat(API_URL,\"/auth/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});if(!response.ok){throw new Error('Login failed');}const data=await response.json();setUser(data.data.user);localStorage.setItem('user',JSON.stringify(data.data.user));localStorage.setItem('token',data.data.token);}else{// Mock data for development\nawait new Promise(resolve=>setTimeout(resolve,1000));const mockUser={id:'1',email,name:email.split('@')[0],role:email==='admin@equitytax1.com'?'admin':'user',avatar:\"https://ui-avatars.com/api/?name=\".concat(email.split('@')[0],\"&background=3b82f6&color=fff\")};setUser(mockUser);localStorage.setItem('user',JSON.stringify(mockUser));}}catch(error){throw new Error('Login failed');}finally{setLoading(false);}};const signup=async(name,email,password)=>{setLoading(true);try{// Simulate API call\nawait new Promise(resolve=>setTimeout(resolve,1000));const mockUser={id:Date.now().toString(),email,name,role:'user',avatar:\"https://ui-avatars.com/api/?name=\".concat(name,\"&background=3b82f6&color=fff\")};setUser(mockUser);localStorage.setItem('user',JSON.stringify(mockUser));}catch(error){throw new Error('Signup failed');}finally{setLoading(false);}};const logout=()=>{setUser(null);localStorage.removeItem('user');};const value={user,login,signup,logout,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","login","email","password","API_URL","process","env","REACT_APP_API_URL","response","fetch","concat","method","headers","body","stringify","ok","data","json","setItem","token","Promise","resolve","setTimeout","mockUser","id","name","split","role","avatar","error","signup","Date","now","toString","logout","removeItem","value","Provider"],"sources":["D:/Cursor/Equity Tax/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: 'user' | 'admin';\r\n  avatar?: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  signup: (name: string, email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  loading: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for existing session on app load\r\n    const savedUser = localStorage.getItem('user');\r\n    if (savedUser) {\r\n      setUser(JSON.parse(savedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    setLoading(true);\r\n    try {\r\n      // Use production API if available, otherwise fallback to mock\r\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n      \r\n      if (API_URL && API_URL !== 'http://localhost:3001/api') {\r\n        // Production API call\r\n        const response = await fetch(`${API_URL}/auth/login`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ email, password }),\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Login failed');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        setUser(data.data.user);\r\n        localStorage.setItem('user', JSON.stringify(data.data.user));\r\n        localStorage.setItem('token', data.data.token);\r\n      } else {\r\n        // Mock data for development\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        const mockUser: User = {\r\n          id: '1',\r\n          email,\r\n          name: email.split('@')[0],\r\n          role: email === 'admin@equitytax1.com' ? 'admin' : 'user',\r\n          avatar: `https://ui-avatars.com/api/?name=${email.split('@')[0]}&background=3b82f6&color=fff`\r\n        };\r\n        \r\n        setUser(mockUser);\r\n        localStorage.setItem('user', JSON.stringify(mockUser));\r\n      }\r\n    } catch (error) {\r\n      throw new Error('Login failed');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const signup = async (name: string, email: string, password: string) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const mockUser: User = {\r\n        id: Date.now().toString(),\r\n        email,\r\n        name,\r\n        role: 'user',\r\n        avatar: `https://ui-avatars.com/api/?name=${name}&background=3b82f6&color=fff`\r\n      };\r\n      \r\n      setUser(mockUser);\r\n      localStorage.setItem('user', JSON.stringify(mockUser));\r\n    } catch (error) {\r\n      throw new Error('Signup failed');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    signup,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}